// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: place_schedule.sql

package sqlcore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO place_schedule (
    place_id,
    day_of_week,
    open_time,
    close_time
)
VALUES ($1, $2, $3, $4)
RETURNING id, place_id, day_of_week, open_time, close_time, created_at
`

type CreateScheduleParams struct {
	PlaceID   uuid.UUID
	DayOfWeek int32
	OpenTime  time.Time
	CloseTime time.Time
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (PlaceSchedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.PlaceID,
		arg.DayOfWeek,
		arg.OpenTime,
		arg.CloseTime,
	)
	var i PlaceSchedule
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM place_schedule
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getScheduleByID = `-- name: GetScheduleByID :one
SELECT id, place_id, day_of_week, open_time, close_time, created_at FROM place_schedule
WHERE id = $1
`

func (q *Queries) GetScheduleByID(ctx context.Context, id uuid.UUID) (PlaceSchedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleByID, id)
	var i PlaceSchedule
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
		&i.CreatedAt,
	)
	return i, err
}

const getScheduleByPlaceIDAndDay = `-- name: GetScheduleByPlaceIDAndDay :one
SELECT id, place_id, day_of_week, open_time, close_time, created_at FROM place_schedule
WHERE place_id = $1 AND day_of_week = $2
`

type GetScheduleByPlaceIDAndDayParams struct {
	PlaceID   uuid.UUID
	DayOfWeek int32
}

func (q *Queries) GetScheduleByPlaceIDAndDay(ctx context.Context, arg GetScheduleByPlaceIDAndDayParams) (PlaceSchedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleByPlaceIDAndDay, arg.PlaceID, arg.DayOfWeek)
	var i PlaceSchedule
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
		&i.CreatedAt,
	)
	return i, err
}

const listScheduleByDay = `-- name: ListScheduleByDay :many
SELECT id, place_id, day_of_week, open_time, close_time, created_at FROM place_schedule
WHERE day_of_week = $1
`

func (q *Queries) ListScheduleByDay(ctx context.Context, dayOfWeek int32) ([]PlaceSchedule, error) {
	rows, err := q.db.QueryContext(ctx, listScheduleByDay, dayOfWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaceSchedule
	for rows.Next() {
		var i PlaceSchedule
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.DayOfWeek,
			&i.OpenTime,
			&i.CloseTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listScheduleByPlaceID = `-- name: ListScheduleByPlaceID :many
SELECT id, place_id, day_of_week, open_time, close_time, created_at FROM place_schedule
WHERE place_id = $1
`

func (q *Queries) ListScheduleByPlaceID(ctx context.Context, placeID uuid.UUID) ([]PlaceSchedule, error) {
	rows, err := q.db.QueryContext(ctx, listScheduleByPlaceID, placeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaceSchedule
	for rows.Next() {
		var i PlaceSchedule
		if err := rows.Scan(
			&i.ID,
			&i.PlaceID,
			&i.DayOfWeek,
			&i.OpenTime,
			&i.CloseTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE place_schedule
SET
    day_of_week = $2,
    open_time = $3,
    close_time = $4
WHERE id = $1
RETURNING id, place_id, day_of_week, open_time, close_time, created_at
`

type UpdateScheduleParams struct {
	ID        uuid.UUID
	DayOfWeek int32
	OpenTime  time.Time
	CloseTime time.Time
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (PlaceSchedule, error) {
	row := q.db.QueryRowContext(ctx, updateSchedule,
		arg.ID,
		arg.DayOfWeek,
		arg.OpenTime,
		arg.CloseTime,
	)
	var i PlaceSchedule
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
		&i.CreatedAt,
	)
	return i, err
}

const updateScheduleByPlaceId = `-- name: UpdateScheduleByPlaceId :one
UPDATE place_schedule
SET
    day_of_week = $2,
    open_time = $3,
    close_time = $4
WHERE place_id = $1
RETURNING id, place_id, day_of_week, open_time, close_time, created_at
`

type UpdateScheduleByPlaceIdParams struct {
	PlaceID   uuid.UUID
	DayOfWeek int32
	OpenTime  time.Time
	CloseTime time.Time
}

func (q *Queries) UpdateScheduleByPlaceId(ctx context.Context, arg UpdateScheduleByPlaceIdParams) (PlaceSchedule, error) {
	row := q.db.QueryRowContext(ctx, updateScheduleByPlaceId,
		arg.PlaceID,
		arg.DayOfWeek,
		arg.OpenTime,
		arg.CloseTime,
	)
	var i PlaceSchedule
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
		&i.CreatedAt,
	)
	return i, err
}
