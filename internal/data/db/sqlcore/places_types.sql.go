// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: places_types.sql

package sqlcore

import (
	"context"
)

const createPlacesType = `-- name: CreatePlacesType :one
INSERT INTO place_types (id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreatePlacesTypeParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreatePlacesType(ctx context.Context, arg CreatePlacesTypeParams) (PlaceType, error) {
	row := q.db.QueryRowContext(ctx, createPlacesType, arg.ID, arg.Name)
	var i PlaceType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePlacesType = `-- name: DeletePlacesType :exec
DELETE FROM place_types
WHERE id = $1
`

func (q *Queries) DeletePlacesType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePlacesType, id)
	return err
}

const getPlacesTypeByID = `-- name: GetPlacesTypeByID :one
SELECT id, name FROM place_types
WHERE id = $1
`

func (q *Queries) GetPlacesTypeByID(ctx context.Context, id int32) (PlaceType, error) {
	row := q.db.QueryRowContext(ctx, getPlacesTypeByID, id)
	var i PlaceType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPlacesTypeByName = `-- name: GetPlacesTypeByName :one
SELECT id, name FROM place_types
WHERE name = $1
`

func (q *Queries) GetPlacesTypeByName(ctx context.Context, name string) (PlaceType, error) {
	row := q.db.QueryRowContext(ctx, getPlacesTypeByName, name)
	var i PlaceType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updatePlacesType = `-- name: UpdatePlacesType :one
UPDATE place_types
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdatePlacesTypeParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdatePlacesType(ctx context.Context, arg UpdatePlacesTypeParams) (PlaceType, error) {
	row := q.db.QueryRowContext(ctx, updatePlacesType, arg.ID, arg.Name)
	var i PlaceType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
