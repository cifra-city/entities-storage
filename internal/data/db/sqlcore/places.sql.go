// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: places.sql

package sqlcore

import (
	"context"

	"github.com/google/uuid"
)

const createPlace = `-- name: CreatePlace :one
INSERT INTO places (id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
    RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type CreatePlaceParams struct {
	ID            uuid.UUID
	Name          string
	Type          int32
	DistributorID uuid.UUID
	StreetID      uuid.UUID
	HouseNumber   string
	Location      interface{}
	TotalScore    int32
	ReviewsCount  int32
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, createPlace,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.DistributorID,
		arg.StreetID,
		arg.HouseNumber,
		arg.Location,
		arg.TotalScore,
		arg.ReviewsCount,
	)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlace = `-- name: DeletePlace :exec
DELETE FROM places
WHERE id = $1
`

func (q *Queries) DeletePlace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlace, id)
	return err
}

const getPlaceByID = `-- name: GetPlaceByID :one
SELECT id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at FROM places
WHERE id = $1
`

func (q *Queries) GetPlaceByID(ctx context.Context, id uuid.UUID) (Place, error) {
	row := q.db.QueryRowContext(ctx, getPlaceByID, id)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPlaces = `-- name: ListPlaces :many
SELECT id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at FROM places
ORDER BY created_at DESC
`

func (q *Queries) ListPlaces(ctx context.Context) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, listPlaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DistributorID,
			&i.StreetID,
			&i.HouseNumber,
			&i.Location,
			&i.TotalScore,
			&i.ReviewsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlacesByDistributor = `-- name: ListPlacesByDistributor :many
SELECT id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at FROM places
WHERE distributor_id = $1
`

func (q *Queries) ListPlacesByDistributor(ctx context.Context, distributorID uuid.UUID) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, listPlacesByDistributor, distributorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DistributorID,
			&i.StreetID,
			&i.HouseNumber,
			&i.Location,
			&i.TotalScore,
			&i.ReviewsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlacesByStreet = `-- name: ListPlacesByStreet :many
SELECT id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at FROM places
WHERE street_id = $1
`

func (q *Queries) ListPlacesByStreet(ctx context.Context, streetID uuid.UUID) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, listPlacesByStreet, streetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DistributorID,
			&i.StreetID,
			&i.HouseNumber,
			&i.Location,
			&i.TotalScore,
			&i.ReviewsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlacesByStreetAndType = `-- name: ListPlacesByStreetAndType :many
SELECT id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at FROM places
WHERE street_id = $1 AND type = $2
`

type ListPlacesByStreetAndTypeParams struct {
	StreetID uuid.UUID
	Type     int32
}

func (q *Queries) ListPlacesByStreetAndType(ctx context.Context, arg ListPlacesByStreetAndTypeParams) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, listPlacesByStreetAndType, arg.StreetID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DistributorID,
			&i.StreetID,
			&i.HouseNumber,
			&i.Location,
			&i.TotalScore,
			&i.ReviewsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlacesByType = `-- name: ListPlacesByType :many
SELECT id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at FROM places
WHERE type = $1
`

func (q *Queries) ListPlacesByType(ctx context.Context, type_ int32) ([]Place, error) {
	rows, err := q.db.QueryContext(ctx, listPlacesByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.DistributorID,
			&i.StreetID,
			&i.HouseNumber,
			&i.Location,
			&i.TotalScore,
			&i.ReviewsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlace = `-- name: UpdatePlace :one
UPDATE places
SET name = $2, type = $3, distributor_id = $4, street_id = $5, house_number = $6, location = $7, updated_at = NOW()
WHERE id = $1
RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type UpdatePlaceParams struct {
	ID            uuid.UUID
	Name          string
	Type          int32
	DistributorID uuid.UUID
	StreetID      uuid.UUID
	HouseNumber   string
	Location      interface{}
}

func (q *Queries) UpdatePlace(ctx context.Context, arg UpdatePlaceParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlace,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.DistributorID,
		arg.StreetID,
		arg.HouseNumber,
		arg.Location,
	)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlaceDistributor = `-- name: UpdatePlaceDistributor :one
UPDATE places
SET distributor_id = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type UpdatePlaceDistributorParams struct {
	ID            uuid.UUID
	DistributorID uuid.UUID
}

func (q *Queries) UpdatePlaceDistributor(ctx context.Context, arg UpdatePlaceDistributorParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlaceDistributor, arg.ID, arg.DistributorID)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlaceLocation = `-- name: UpdatePlaceLocation :one
UPDATE places
SET location = $2, house_number = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type UpdatePlaceLocationParams struct {
	ID          uuid.UUID
	Location    interface{}
	HouseNumber string
}

func (q *Queries) UpdatePlaceLocation(ctx context.Context, arg UpdatePlaceLocationParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlaceLocation, arg.ID, arg.Location, arg.HouseNumber)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlaceName = `-- name: UpdatePlaceName :one
UPDATE places
SET name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type UpdatePlaceNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdatePlaceName(ctx context.Context, arg UpdatePlaceNameParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlaceName, arg.ID, arg.Name)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlaceScore = `-- name: UpdatePlaceScore :one
UPDATE places
SET total_score = total_score + $2, reviews_count = reviews_count + 1
WHERE id = $1
RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type UpdatePlaceScoreParams struct {
	ID         uuid.UUID
	TotalScore int32
}

func (q *Queries) UpdatePlaceScore(ctx context.Context, arg UpdatePlaceScoreParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlaceScore, arg.ID, arg.TotalScore)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlaceType = `-- name: UpdatePlaceType :one
UPDATE places
SET type = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, type, distributor_id, street_id, house_number, location, total_score, reviews_count, created_at, updated_at
`

type UpdatePlaceTypeParams struct {
	ID   uuid.UUID
	Type int32
}

func (q *Queries) UpdatePlaceType(ctx context.Context, arg UpdatePlaceTypeParams) (Place, error) {
	row := q.db.QueryRowContext(ctx, updatePlaceType, arg.ID, arg.Type)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.DistributorID,
		&i.StreetID,
		&i.HouseNumber,
		&i.Location,
		&i.TotalScore,
		&i.ReviewsCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
